// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  name       String
  phone      String?  @unique
  email      String?  @unique
  created_at DateTime @default(now())
  is_active  Boolean  @default(true)
  sessions   Session[]
}

model Game {
  id         Int         @id @default(autoincrement())
  title      String      // changed from name
  is_active  Boolean     @default(true)
  created_at DateTime    @default(now())
  sessions   Session[]
  prices     GamePrice[] // new relation for pricing models
}

model GamePrice {
  id      Int    @id @default(autoincrement())
  name    String // e.g. "Per Hour", "Per 30 Min", "VIP"
  price   Int    // price in rupees
  game    Game   @relation(fields: [gameId], references: [id])
  gameId  Int
}

model Session {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [user_id], references: [id])
  user_id    Int
  game       Game     @relation(fields: [game_id], references: [id])
  game_id    Int
  start_time DateTime
  end_time   DateTime?
  is_active  Boolean  @default(true)
  created_at DateTime @default(now())
  // Add snapshot fields for game details
  game_name  String?
  game_rate  Int?
  game_rate_type String?
  game_rate_after_6pm Int?
  game_rate_type_after_6pm String?
  bill_amount Int?
  bill_details String?
  // New: relation to session extras
  extras     SessionProduct[]
  switch_pricing_at_6pm Boolean @default(false) // Whether to switch pricing at 6PM
}

model Product {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  price      Int      // price per unit
  is_active  Boolean  @default(true)
  created_at DateTime @default(now())
  sessionProducts SessionProduct[]
}

model SessionProduct {
  id         Int      @id @default(autoincrement())
  session    Session  @relation(fields: [session_id], references: [id])
  session_id Int
  product    Product  @relation(fields: [product_id], references: [id])
  product_id Int
  quantity   Int
  total_price Int     // price * quantity (snapshot)
  created_at DateTime @default(now())
}
